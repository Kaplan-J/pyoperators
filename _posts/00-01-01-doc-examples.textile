---
layout: post
title: 5. Examples
category: doc
---

h2. 5.1 Data fusion

{% highlight python %}
from __future__ import division
import numpy as np
import scipy
from pyoperators import (BlockColumnOperator, BlockDiagonalOperator,
                         ConvolutionOperator, pcg, I)

x0 = scipy.misc.lena().astype(float)
kernel_sizes = [3, 15]
sigmas = [50, 10]

Hs = [ConvolutionOperator(np.ones((k,k)) / k**2, x0.shape) for k in kernel_sizes]
ns = [np.random.standard_normal(x0.shape) * s for s in sigmas]
invNs = [1 / s**2 for s in sigmas]
ns  = [np.random.standard_normal(x0.shape)*s for s in sigmas]

H = BlockColumnOperator(Hs, new_axisout=0)
invN = BlockDiagonalOperator(invNs, new_axisin=0)
n = np.concatenate(ns).reshape((2,) + x0.shape)
y  = H(x0) + n

A = H.T * invN * H + 0.0005 * I
solution = pcg(A, H.T(invN(y)))
{% endhighlight %}

<img src="{{site.baseurl}}/documentation/figures/lena3_orig.png"> </img>

<img src="{{site.baseurl}}/documentation/figures/lena3_deconvolved.png"> </img>
